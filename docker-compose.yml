# version of docker-compose file format
# https://docs.docker.com/compose/compose-file/
version: '3'

services:
  # service for database
  db:
    image: postgres
    # This container should always be up, and it will restart if it crashes
    restart: always
    env_file: .env
    # Reachable from outside by port 5432
    ports:
      - '5432:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./pg_backups:/pg_backups

  # service for python with django
  web:
    # This container should always be up, and it will restart if it crashes
    restart: always
    # path to Dockerfile
    build:
      # starting path for all commands inside Dockerfile
      context: .
      dockerfile: docker/web/Dockerfile
    # ??? ?????????? ?????????
    env_file: .env
    # default command
    command: python3 manage.py runserver 0.0.0.0:8000
    # command: uwsgi --socket=0.0.0.0:3031 --plugins=python3 --protocol=uwsgi --wsgi=wsgi:application
    # mount all volumes to the code directory
    # Path on the host, relative to the Compose file (./django)
    volumes:
      - ./web/:/code
    # we should use no ports for access only with nginx server
    # ports:
    #   - '8000:8000'
    depends_on:
      - db

#  # service for nginx web server
#  nginx:
#    # This container should always be up, and it will restart if it crashes
#    restart: always
#    build: docker/nginx/.
#    ports:
#      - "80:80"
#      - "443:443"
#    # can access to @web@ container files for serving static files
#    volumes:
#      - ./web/static:/static
#      - ./web/media:/media
#      - ./docker/nginx/certs:/etc/nginx/ssl
#    depends_on:
#      - web

  caddy:
    image: "wemakeservices/caddy-docker:0.10.11-1"
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./docker/caddy/certs:/root/.caddy  # saving certificates
      - ./docker/caddy/Caddyfile:/etc/Caddyfile:ro  # configuration
      - ./web/static:/static:ro
      - ./web/media:/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

# provide source, that contains data from db
# now you can remove and rebuild db container without lose data
volumes:
  pg_data:
  pg_backups: